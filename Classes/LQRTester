import numpy as np
import numpy.linalg as la
import math
"""
Continous dynamics car, contains cost function for elipse track
"""

class SupervisorTest(): 
	T = 200.0 
	dt = 1
	car
	lqr 
	def Gen_Elipse(self,):
		a = 1000
		b = 500
		ref_states = np.zeros([4,T])
		ref_controls = np.zeros([2,T])

		#Set velocity to angle/T 
		ref_states[3,:] = 2*math.pi/self.T


		for i in range(int(self.T)):
			frac = i/self.T 
			ref_states[0,i] = a*np.cos(frac*2*math.pi)
			ref_states[1,i] = b*np.cos(frac*2*math.pi)

			tan = np.array([-a*np.sin(frac),b*np.cos(frac)])
			tan = unit/la.norm(unit)
			unit_x = np.array([0,1])
			cos_a = np.dot(tan,unit_x)

			ref_states[2,i] = np.acos(cos_a)

		for i in range(1,int(self.T)):
			ref_controls = ref_states[2,i] - ref_states[2,i-1] 


		return ref_states,ref_controls


	def linearizeTraj(self,ref_states,ref_controls): 

		A_mats = [] 
		B_mats = [] 

		for i in range(T):








	def cost_func(x, u, dt):
		"""
		Computes the cost function of following an elipse

		"""
		W = 20


		A = np.array([u[0]*np.cos(x[2]+u[1])],
		             [u[0]*np.sin(x[2]+u[1])],
		             [u[0]*np.tan(u[2])/W])

		return x+A

	